include "wavecommon.idp"
include "wavemeshxy.idp"

// save mesh (if desired)
if (!testrun && issavemesh) {
    string postfix = "Efield";
    string meshsavefile = "solutions/parabolic-mesh" + saveiter + postfix + ".msh";
    savemesh(Th, meshsavefile);
}

// finite element functions for the electric field
// to be solved for
// do NOT rename these as doing so will break
// the macros
Vh Ex, Ey;
// Vh Efield;
// Vh TestPhi;


// Note: Helmholz equation = all bilinear terms
problem ElectricField(Vec(E), Vec(Phi))
    = int2d(Th)(
        k^2 * Vec(Phi)' * Vec(E)
    )
    - int2d(Th)(
        (J(E) : J(Phi))
    )
    + on(3, Ey=1);
    // - int1d(Th, 3)(
    //     k * Vec(Phi)' * Vec(E)
    // );

    // + on(3, Ex=sin(pi*x))
    // + on(3, Ey=cos(pi*x));
    // + int1d(Th, 3)(
    //     // Bilinear term 3
    //     Vec(Phi)' * Vec(E)
    // );

/*
problem ElectricField(Efield, TestPhi)
    = int2d(Th)(
        k^2 * TestPhi * Efield
    )
    - int2d(Th)(
        grad(Efield)' * grad(TestPhi)
    )
    + on(3, Efield=1);
*/

// solve
ElectricField;

// plot(Efield, value=true, fill=true, cmm="Electric field (spatial components)", ps=epsfilename);
plot(Ey, Vec(E), value=true, fill=true, cmm="Electric field (spatial components)");
