/* Written for FreeFEM++ v4.15 */

// This solves the Helmholtz equation
// for a rectangular RF cavity with a small
// aperture

int cavity = 1;
int aperture = 2;
int edge = 3;

real a = 0.3; // aperture diameter
real b = (1 - a) / 2;
real R = 10.0; // This should be a "large" number to simulate infinite domain

 // use (n, m)-th mode
int n = 1;
int m = 0;
real k = sqrt(n^2 + m^2) * pi;
// We assume perfectly-conductive cavity walls
// but with some nonzero thickness as advised
// by https://community.freefem.org/t/correctness-of-solution-for-helmholtz-equation-for-open-rf-cavity/3978/2
real h = 0.05; // thickness of the RF cavity walls

// in theory, we would need an infinite domain
// to properly simulate waves propagating to
// infinity, but we'll approximate this
// by making the domain bounded by a circle
// of radius R that is effectively infinite

// top wall
border boxtopInner(t=1, 0){ x=t; y=1; label=cavity; }
border boxtopOuter(t=1, 0){ x=((1 + 2*h)*t - h); y=1+h; label=cavity; }

// right wall
border boxrightupInner(t=0, 1){ x=1; y=b*t; label=cavity; } // upper right
border boxrightupOuter(t=0, 1){ x=1+h; y=((b + h)*t - h); label=cavity; }
border boxUpperConnector(t=1, 1+h) { x = t; y=b; label=cavity; }

border boxrightdownInner(t=0, 1){ x=1; y=(1 - b*t); label=cavity; } // lower right
border boxrightdownOuter(t=1, 0){ x=1+h; y=(1-b + (h + b)*t); label=cavity; }
border boxLowerConnector(t=1, 1+h) { x = t; y=(1-b); label=cavity; }

border boxaperture(t=0, 1){ x=1; y=((t + b/a)*a); label=aperture; } // aperture

// bottom wall
border boxbottomInner(t=0, 1){ x=t; y=0; label=cavity; } // bottom
border boxbottomOuter(t=0, 1){ x=((1 + 2*h)*t - h); y=-h; label=cavity; } // bottom

// left wall
border boxleftInner(t=1, 0){ x=0; y=t; label=cavity; } // left
border boxleftOuter(t=1, 0){ x=-h; y=((1 + 2*h)*t - h); label=cavity; } // left

// circular boundary to fake a boundary at infinity
border circle(t=0,2*pi){x=(R*cos(t) + 0.5); y=(R*sin(t) + 0.5); label=edge; }

int nSides = 50;
int nOpening = 25;
int nCircle = 200;

mesh Th = buildmesh(
    boxtopInner(nSides) 
    + boxtopOuter(nSides)
    + boxrightupInner(nOpening)
    + boxrightupOuter(nOpening)
    + boxUpperConnector(3)
    + boxrightdownInner(nOpening)
    + boxrightdownOuter(nOpening)
    + boxLowerConnector(3)
    + boxbottomInner(nSides) 
    + boxbottomOuter(nSides) 
    + boxleftInner(nSides)
    + boxleftOuter(nSides)
    + circle(nCircle)
    + boxaperture(nOpening)
    );
plot(Th, cmm="Discretized domain", value=1, wait=1);

/*
For values of k^2 = (n^2 + m^2) pi^2
then the homogenous Neumann problem
yields a solution even with
E = 0 at the boundaries.

For all other values of k, the homogenous
Neumann problem yields a null solution, since
the Helmholtz equation (D^2 + k^2) E = 0
is an eigenvalue problem and the only
solutions are the eigenfunctions of the
Helmholtz operator.
*/

fespace Vh(Th, P1);
Vh<complex> TestPhi, Emag;

macro grad(u) [dx(u), dy(u)] //

solve Helmholtz(Emag, TestPhi)
    = int2d(Th)(
        grad(Emag)' * grad(TestPhi)
    )
    - int2d(Th) (
        k^2 * Emag * TestPhi
    )
    // radiative BC at "infinite" edge
    - int1d(Th, edge)(
        1i * k * Emag * TestPhi
    )
    // perfectly-reflective BC
    + on(cavity, Emag=0)
    // radiative BC on aperture
    // - int1d(Th, aperture)(
    //     1i * k * Emag * TestPhi
    // );
    // constant-field (neumann) BC
    + on(aperture, Emag=1);

Vh Ereal = real(Emag);
Vh Eimag = imag(Emag);
Vh Eabs = abs(Emag);

// plot real & imaginary parts of the field
plot(Ereal, value=true, fill=true, dim=2, cmm="Real Part of E-field (k=" + k + ")", wait=1);
plot(Eimag, value=true, fill=true, dim=2, cmm="Imaginary Part of E-field (k=" + k + ")", wait=1);
