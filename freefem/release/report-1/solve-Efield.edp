include "wavecommon.idp"
include "wavemeshxy.idp"

// save mesh (if desired)
if (!testrun && issavemesh) {
    string postfix = "Efield";
    string meshsavefile = "solutions/parabolic-mesh" + saveiter + postfix + ".msh";
    savemesh(Th, meshsavefile);
}

// coordinate transformation
real alpha = L/2;
real beta = D/2;
func xprime = alpha * tanh(x);
func yprime = beta * tanh(y);
// J(x') * J(x') term
func JacobTransform = alpha^2 * (1 - xprime^2)^2 + beta^2 * (1 - yprime^2)^2;

// finite element functions for the electric field
// to be solved for
// do NOT rename these as doing so will break
// the macros
Vh Ex, Ey;
Vh EfieldTransformed; // scalar
Vh EfieldOriginalx, EfieldOriginaly;
Vh EOriginal; // scalar

// For dirichlet BC, otherwise
// if set to zero, then the simulation
// has null result (all zeroes result)
// which is probably a consequence of
// the Helmholz equation being elliptic
// and entirely bilinear
real edgeval = 0.001;

// Note: Helmholz equation = all bilinear terms
problem ElectricField(Vec(E), Vec(Phi))
    = int2d(Th)(
        -1 * JacobTransform * div(E) * div(Phi)
    )
    + int2d(Th)(
        k^2 * Vec(E)' * Vec(Phi)
    )
    + on(3, Ex=edgeval)
    + on(3, Ey=edgeval);
    // - int1d(Th, 3)(
    //     k * Vec(Phi)' * Vec(E)
    // );

    // + on(3, Ex=sin(pi*x))
    // + on(3, Ey=cos(pi*x));
    // + int1d(Th, 3)(
    //     // Bilinear term 3
    //     Vec(Phi)' * Vec(E)
    // );

/*
problem ElectricField(Efield, TestPhi)
    = int2d(Th)(
        k^2 * TestPhi * Efield
    )
    - int2d(Th)(
        grad(Efield)' * grad(TestPhi)
    )
    + on(3, Efield=1);
*/

// solve
cout << "Solving PDE (script V6)..." << endl;
ElectricField;

// plot(Efield, value=true, fill=true, cmm="Electric field (spatial components)", ps=epsfilename);

EfieldTransformed = magnitude(E);
func Etransform = [Ex(x, y), Ey(x, y)];
plot(EfieldTransformed, Vec(E), value=true, fill=true, cmm="Electric field (spatial components, transformed coordinates x', y')", wait=1, ps="solutions/research-report-1-finals/solution_uv.eps");

func ETransformedX = Ex(x, y);
func ETransformedY = Ey(x, y);
EfieldOriginalx = ETransformedX(alpha * tanh(x), beta * tanh(y));
EfieldOriginaly = ETransformedY(alpha * tanh(x), beta * tanh(y));
EOriginal = magnitude(EfieldOriginal);
plot(EOriginal, Vec(EfieldOriginal), value=true, fill=true, coef=100, cmm="Electric field (spatial components, original coordinates x, y)", wait=1, ps="solutions/research-report-1-finals/solution_xy.eps");